{"name":"Pipe","tagline":"A Python library to use infix notation in Python","body":"### Introduction\r\nPipe is a Python module enablig a sh like infix syntax (using pipes).\r\nAs an exemple, here is the solution for the 2nd Euler Project exercise :    \r\n\"Find the sum of all the even-valued terms in Fibonacci which do not exceed four million.\"\r\n(Given fib a generator of fibonacci numbers) \r\n```\r\neuler2 = fib() | where(lambda x: x % 2 == 0)\r\n               | take_while(lambda x: x < 4000000)\r\n               | add\r\n```\r\n\r\n## Installation\r\n```\r\n$ easy_install pipe\r\n```\r\n\r\nor\r\n```\r\n$ git clone https://github.com/JulienPalard/Pipe.git\r\n$ cd Pipe\r\n$ python setup.py install\r\n```\r\n\r\n## Vocabulary\r\n * a Pipe is a 'pipeable' function, somthing that you can pipe to. In the code '[1, 2, 3] | add' `add` is a Pipe\r\n * a Pipe function: A standard function returning a Pipe so it can be used like a normal Pipe but called like in : [1, 2, 3] | concat(\"#\")\r\n    \r\n    \r\n## Syntax\r\nThe basic syntax is to use a Pipe like in a shell :\r\n```\r\n>>> [1, 2, 3] | add\r\n6\r\n```\r\n\r\nA Pipe can be a function call, for exemple the Pipe function 'where' :\r\n```\r\n>>> [1, 2, 3] | where(lambda x: x % 2 == 0) #doctest: +ELLIPSIS\r\n<generator object <genexpr> at ...>\r\n```\r\nA Pipe as a function is nothing more than a function returning a specialized Pipe.\r\n\r\n### Constructing your own\r\nYou can construct your pipes using Pipe classe initialized with lambdas like :\r\n\r\n```\r\nstdout = Pipe(lambda x: sys.stdout.write(str(x)))\r\nselect = Pipe(lambda iterable, pred: (pred(x) for x in iterable))\r\n```\r\nOr using decorators :\r\n```\r\n@Pipe\r\ndef stdout(x):\r\n    sys.stdout.write(str(x))\r\n```\r\n    \r\n### Existing Pipes\r\n\r\nYou should read the README file or the python documentation for the module.\r\n","google":"UA-268798-11","note":"Don't delete this file! It's used internally to help with page regeneration."}